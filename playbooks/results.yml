---
- name: Mostrar configuración y vecinos OSPFv2 vía comandos CLI en IOS XE
  hosts: router
  gather_facts: false
  connection: ansible.netcommon.network_cli

  tasks:
    - name: Obtener configuración de interfaces relevantes
      cisco.ios.ios_command:
        commands:
          - show running-config interface GigabitEthernet1
          - show running-config interface GigabitEthernet2
      register: interface_config

    - name: Mostrar configuración de interfaces
      debug:
        var: interface_config.stdout_lines

    - name: Obtener vecinos OSPF
      cisco.ios.ios_command:
        commands:
          - show ip ospf neighbor
      register: ospf_neighbors

    - name: Mostrar vecinos OSPF
      debug:
        var: ospf_neighbors.stdout_lines

- name: Configure OSPFv2 via NETCONF in IOS XE
  hosts: router
  gather_facts: false
  connection: ansible.netcommon.netconf
  vars:
    ansible_port: 830

  tasks:
    - name: Get Interface Config
      ansible.netcommon.netconf_get:
        source: running
        display: pretty
        filter: |
          <native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
            <interface>
              <GigabitEthernet>
                <name>1</name>
              </GigabitEthernet>
              <GigabitEthernet>
                <name>2</name>
              </GigabitEthernet>
              <GigabitEthernet>
                <name>3</name>
              </GigabitEthernet>
            </interface>
          </native>
      register: interface_config

    - name: Print Interface Data
      debug:
        msg: "{{ interface_config.stdout }}"

    - name: Get OSPF-related state from running config
      ansible.netcommon.netconf_get:
        display: xml
        source: running
        filter: |
          <ospf-oper-data xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-ospf-oper">
            <ospf-state/>
          </ospf-oper-data>
      register: ospf_config

    - name: Display OSPF running config
      debug:
        var: ospf_config.output

    # Optional: Guardar resultado en archivo local
    # - name: Guardar vecinos OSPF en archivo
    #   copy:
    #     content: "{{ ospf_neighbors.stdout | join('\n') }}"
    #     dest: "./configs/{{ inventory_hostname }}-ospf-neighbors.txt"

