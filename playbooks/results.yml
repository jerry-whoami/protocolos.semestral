---
- name: Mostrar configuración y vecinos OSPFv2 vía comandos CLI en IOS XE
  hosts: router
  gather_facts: false
  connection: ansible.netcommon.network_cli

  tasks:
    - name: Obtener configuración de interfaces relevantes
      cisco.ios.ios_command:
        commands:
          - show running-config interface GigabitEthernet1
          - show running-config interface GigabitEthernet2
      register: interface_config

    - name: Mostrar configuración de interfaces
      debug:
        var: interface_config.stdout_lines

    - name: Obtener vecinos OSPF
      cisco.ios.ios_command:
        commands:
          - show ip ospf neighbor
      register: ospf_neighbors

    - name: Mostrar vecinos OSPF
      debug:
        var: ospf_neighbors.stdout_lines

- name: Configure OSPFv2 via NETCONF in IOS XE
  hosts: router
  gather_facts: false
  connection: ansible.netcommon.netconf
  vars:
    ansible_port: 830

  tasks:
    - name: Get full running config
      ansible.netcommon.netconf_get:
        source: running
      register: running_config

    - name: Display raw config
      debug:
        var: running_config.rpc_reply

    - name: Get OSPF-related state from running config
      ansible.netcommon.netconf_get:
        source: running
        filter: |
          <ospf-oper-data xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-ospf-oper">
            <ospf-state/>
          </ospf-oper-data>
      register: ospf_config

    - name: Display OSPF running config
      debug:
        var: ospf_config.rpc_reply

    - name: Get OSPF neighbor state (direct RPC)
      ansible.netcommon.netconf_rpc:
        rpc: |
          <get>
            <filter xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" type="subtree">
              <ospf-oper-data xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-ospf-oper">
                <ospf-state/>
              </ospf-oper-data>
            </filter>
          </get>
      register: ospf_neighbors

    - name: Display OSPF neighbor output
      debug:
        var: ospf_neighbors.rpc_reply
    # Optional: Guardar resultado en archivo local
    # - name: Guardar vecinos OSPF en archivo
    #   copy:
    #     content: "{{ ospf_neighbors.stdout | join('\n') }}"
    #     dest: "./configs/{{ inventory_hostname }}-ospf-neighbors.txt"

